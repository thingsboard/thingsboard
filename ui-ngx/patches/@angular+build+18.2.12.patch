diff --git a/node_modules/@angular/build/src/tools/angular/compilation/angular-compilation.js b/node_modules/@angular/build/src/tools/angular/compilation/angular-compilation.js
index 625c621..4fc8bd8 100755
--- a/node_modules/@angular/build/src/tools/angular/compilation/angular-compilation.js
+++ b/node_modules/@angular/build/src/tools/angular/compilation/angular-compilation.js
@@ -68,8 +68,6 @@ class AngularCompilation {
             allowEmptyCodegenFiles: false,
             annotationsAs: 'decorators',
             enableResourceInlining: false,
-            supportTestBed: false,
-            supportJitMode: false,
         }));
     }
     async diagnoseFiles(modes = DiagnosticModes.All) {
diff --git a/node_modules/@angular/build/src/tools/esbuild/angular/compiler-plugin.js b/node_modules/@angular/build/src/tools/esbuild/angular/compiler-plugin.js
index b03875c..8c48101 100755
--- a/node_modules/@angular/build/src/tools/esbuild/angular/compiler-plugin.js
+++ b/node_modules/@angular/build/src/tools/esbuild/angular/compiler-plugin.js
@@ -79,7 +79,7 @@ function createCompilerPlugin(pluginOptions, styleOptions) {
                 sourcemap: !!pluginOptions.sourcemap,
                 thirdPartySourcemaps: pluginOptions.thirdPartySourcemaps,
                 advancedOptimizations: pluginOptions.advancedOptimizations,
-                jit: pluginOptions.jit,
+                jit: true, // pluginOptions.jit,
             }, environment_options_1.maxWorkers, cacheStore?.createCache('jstransformer'));
             // Setup defines based on the values used by the Angular compiler-cli
             build.initialOptions.define ??= {};
@@ -385,12 +385,14 @@ function createCompilerPlugin(pluginOptions, styleOptions) {
             async function hasSideEffects(path) {
                 if (!pluginOptions.advancedOptimizations) {
                     return undefined;
+                } else {
+                    return true;
                 }
-                const { sideEffects } = await build.resolve(path, {
+                /*const { sideEffects } = await build.resolve(path, {
                     kind: 'import-statement',
                     resolveDir: build.initialOptions.absWorkingDir ?? '',
                 });
-                return sideEffects;
+                return sideEffects;*/
             }
         },
     };
